#!/bin/bash
#! shellcheck disable=1090,1091,2154
source "$(dirname "$0")/entities.bash.min" new || { echo >&2 "Could not open [$(dirname "$0")/entities.bash]."; exit 1; }
	trap.set on
	strict.set off
	version.set "${_ent_VERSION}"
	msg.usetag.set off
	msg.prefix.set "$PRG"
		
	declare EntitiesDir
	EntitiesDir="${PRGDIR:-}"
	[[ -z $EntitiesDir ]] && msg.die "No dir [$EntitiesDir]"
	# sanity check
	[[ "$(basename "$EntitiesDir")" == 'entities' ]] || msg.die "Sanity check fail."
	
	declare HelpFilesDir="${EntitiesDir}/docs/help"
	cd "$HelpFilesDir" || exit
	
# main
main() {
	local Path='' Item='' srcfile Action
	local -u Category=''
	 
	while (($#)); do
		case "$1" in
			-C|--category)	shift; (($#)) && Category="$1";;
			-I|--item)			shift; (($#)) && Item="$1";;
			-A|--action)		shift; (($#)) && Action="${1,,}";;
			-s|--search)		shift; Search="$1"
											local -a files
											mapfile -t files < <(grep -rsli "$Search" .)
											((${#files[@]})) || { msg.err ""; return 2; } 
											srcfile=$(xselect -p 'Select file to view: ' "${files[@]}" 'exit')
											[[ $srcfile == '!q' || $srcfile == 'exit' ]] && break
											Category=$(dirname "$srcfile")
											Item=$(basename "$srcfile")
#											return $?
											;;
			-v|--verbose)		msg.verbose.set on;;
			-q|--quiet)			msg.verbose.set off;;
			-V|--version)		version.set; return 0;;
			-h|--help)			usage; return 0;;
			-?|--*)					msg.err "Invalid option [$1]"; return 22;;
			*)							if   [[ -z $Category ]]; then 
												Category="$1"
											elif [[ -z $Item ]]; then 
												Item="$1"
											elif [[ -z $Action ]]; then 
												Action="$1"
											else 
												msg.err "Too many arguments [$1]"; return 22
											fi;;
		esac
		shift
	done
	if [[ -n $Category ]]; then
		if [[ ! -d $Category ]]; then
			msg.err "Category [$Category] not found."
			Category='' Item=''
			[[ $Action == 'exit' ]] && return 1
		fi
		if [[ -n $Item ]]; then
			if [[ ! -f $Category/$Item ]]; then
				msg.err "Item [$Category/$Item] not found."
				Item=''
				[[ $Action == 'exit' ]] && return 1
			fi
		fi
		if [[ -n $Category ]]; then
			if [[ -n $Item ]]; then 
				Path="$Category/$Item"
			elif [[ -n $Category ]]; then
				Path="$Category"
			fi
		fi
	fi
	
	msg.info "Entities Help"

	while((1)); do 
		[[ -z $Path ]] && Path=$(xselect -p "Select Category: " ./* 'exit')
		[[ $Path == '!q' || $Path == 'exit' ]] && break
		if [[ $Path == '!0' ]]; then
			[[ $PWD == "$HelpFilesDir" ]] && break
			cd .. || break
		elif [[ -d "$Path" ]]; then
			cd "$Path" || break
		else
			[[ ! -f $Path ]] && break
			while((1)); do
				more "$Path"
				srcfile=$(grep -i '[[:blank:]]*URL: ' "$Path")
				srcfile=${srcfile#*:[[:blank:]]*}
				srcfile="${srcfile/file\:\/\//}"
				[[ -z $Action ]] && Action=$(xselect -p "Select action: " "edit $(basename "$srcfile")" 'exit')
				[[ $Action == '!q' || $Action == 'exit' ]] && break 2
				[[ $Action == '!0' ]] && break
				$EDITOR "$srcfile"
				Action=''
			done
		fi
		Action=''
		Path=''
	done
}

# exit trap set to cleanup
cleanup() {
	local -i err=$?
	[[ -z ${1:-} ]] && err="$1"
	((err > 1)) && errno "$err"
	exit "$err"
}

display_tree() {
	local tmp
	local htmfile='index.html'
	local browser
	browser="$(which lynx || which w3m)"
	
	if [[ ! -f "$HelpFilesDir/$htmfile" ]]; then
		msg.info "Creating [$htmfile]..."
		(
			cd "$HelpFilesDir" || msg.die "Could not cd into [$HelpFilesDir]."
			/usr/bin/tree --dirsfirst --noreport -H ./ -T 'entities.bash help files' "$(pwd)"
			# clean up html output
			tmp=$(cat "$htmfile")
			tmp="${tmp//<!--/}" 
			tmp="${tmp//-->${LF}/}" 
			tmp="${tmp//<p class=\"VER*\/p>/}" 
			tmp="${tmp//<\/style>/H1,h1 \{text-align:left;color:green;\}${LF}<\/style>}"
			# blast it back to the html file
			echo "$tmp"
		) >$htmfile
		chmod 666 "$htmfile"
	fi

	## open up helpfiles	
	$browser "$HelpFilesDir/index.html" 

	return 0 
}

usage() {
# 0#######:#|##|############|#################################################78
	cat <<-usage
	Script  : $PRG
	Version : entities ${_ent_VERSION:-}
	Synopsis: $PRG [-a][-t][-s "search"][name]  [-v][-q] [-V] [-h] 
	        :  name          Any entities function|globalx|global|file
	        :  -t|--tree     Show interactive web tree of all functions.
	        :  -s|--search   Wildcard search all help files for keyword.
	        :  -v|--verbose  Turn on  msg verbose. (default)
	        :  -q|--quiet    Turn off msg verbose.
	        :  -V|--version  Print version.
	        :  -h|--help     This help.
	Example : $PRG msg.info msg.line 
	usage
# 0#######:#|##|############|#################################################78
}
main "$@"
#fin
