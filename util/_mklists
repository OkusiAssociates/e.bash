#!/bin/bash
source $OKROOT/entities/entities.bash || { echo >&2 "source $OKROOT/entities/entities.bash failed!"; exit 1; }
strict.set on
trap.set on

_ENTDIR=${PRGDIR%\/*}
_ENTITIES=${_ENTDIR}/entities.bash

main() {
	declare -a globalvars=() filelines=() 
	local IFS="$IFS"

	while (($#)); do
		case "$1" in
			-q|--quiet)			VERBOSE=0 	;;
			-v|--verbose)		VERBOSE=1 	;;
			-h|-?|--help)		usage exit	;;
			*)							usage; diemsg log "Bad command line argument '$1'!" ;;
		esac
		shift
	done

	# globals
	IFS=$'\n'
	filelines=( $(grep '^declare' ${_ENTITIES}) )	# read entities.bash into array
	IFS=$' \t\n'
	(( ${#filelines[@]} )) || msgdie "no declare commands found!"
	for line in "${filelines[@]}"; do
		line=$(trim $line)
		elements=( $line )
		# not enough parameters!
		(( ${#elements[@]} < 3 )) && continue
		gtype=$(trim "${elements[1]}")
		# no explicit type declaration!
		if [[ "${gtype:0:1}" == '-' ]]; then
			offset=2
		else
			gtype='--'
			offset=1
		fi
		# it's a function!
		[[ "${gtype}" =~ "f" ]] && continue
		# it's IFS!
		[[ "${elements[2]:0:3}" == 'IFS' ]] && continue

		line="declare $(printf '%4.4s' $gtype) ${elements[@]:$offset}"
		globalvars+=("${line}")
	done	
	( for v in "${globalvars[@]}"; do 
			echo "$(trim "$v")"
		done 
	) > "$PRGDIR/globalvars.inc.sh"
	msginfo "$PRGDIR/globalvars.inc.sh created."

	#	functions
	IFS=$'\n'
	funcs=( $(grep '^[a-zA-Z0-9_-.]*(' ${_ENTITIES}) )
	(( ${#funcs[@]} )) || exit
	IFS=$' \t\n'
	(	
		for l in "${funcs[@]}"; do
			echo "$(trim "${l%()*}")"
		done
	) > "$PRGDIR/functions.inc.sh"
	msginfo "$PRGDIR/functions.inc.sh created."

	#	aliases
	IFS=$'\n'
	funcs=( $(grep "^[[:space:]]alias" ${_ENTITIES}) )
	(( ${#funcs[@]} )) || exit
	IFS=$' \t\n'
	(	
		for l in "${funcs[@]}"; do
			echo "$(trim "${l}")"
		done	
		echo "shopt -s expand_aliases"
	) > "$PRGDIR/functionaliases.inc.sh"
	msginfo "$PRGDIR/functionaliases.inc.sh created."
}

usage() {
	cat <<-usage
		Usage: $PRG [-h|--help]
		Make lists of Entities global variables, aliases and global functions. 

	usage
	[[ $1 == 'exit' ]] && exit 1
}

main "$@"
#fin

