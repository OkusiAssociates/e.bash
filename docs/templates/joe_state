# JOE state file v1.0
search
	pattern "  "
	backwards 0
	ignore 0
	replace 0
	block_restrict 0
	regex 0
done
macros
	0 "insf,brpaste,\"/usr/share/okusi/entities/templates/std-template.sh\",brpaste_done,rtn,dnarw,dnarw,dnarw,dnarw,dnarw,dnarw,dnarw,dnarw,rtarw"
	9 "insf,brpaste,\"/usr/share/okusi/entities/templates/std-args.inc.sh\",brpaste_done,rtn"
done
files
	"templates/std-template.sh\n"
	"/usr/share/okusi/entities/templates/std-template.sh\n"
	"/usr/share/okusi/entities/templates/std-template.sh\n"
	"t\n"
	"/usr/share/okusi/entities/templates/std-template.sh\n"
	"/usr/share/okusi/entities/templates/std-args.inc.sh\n"
	"/usr/share/okusi/entities/t\n"
	"/usr/share/okusi/entities/templates/std-args.inc.sh\n"
	"t\n"
	"/usr/share/okusi/entities/templates/std-args.inc.sh\n"
done
find
	"$d\n"
	"ROOT\n"
	"*.bash\n"
	".bash\n"
	"return\n"
	"  \n"
done
replace
	"$ROOT\n"
	"_ent_ROOT\n"
done
run
done
build
done
grep
done
cmd
done
math
done
yank
	"tie"
	"ws"
	"mc"
	"d"
	"-"
	"s"
	"s called"
	"calle"
	"**"
	"-------------------------------\nt3: source fallthrough 6\n$0   : ./t3\nrl $0: /usr/share/okusi/entities/tmp/t3\nbs   : ../entities.bash\nrl bs: /usr/share/okusi/entities/entities.bash\nbs@  : ../entities.bash ./t3\nSL   : 4\nent  : 1\n\n"
	"kembali ke t2 6\nkembali ke t1 5\n"
	"ad "
	" and "
	":-"
	"."
	"exit"
	"exit"
	"  # entities is already loaded, and no parameter has been given, so do not reload."
	"	"
	"  # entities is already loaded, and no parameter has been given, so do not reload.\n	(($# == 0 && SHLVL > 1 && __entities__)) && return 0;\n"
	"		\n"
	"\n"
	"|nopreserve|--nopreserve|-n"
	"|--preserve|-p"
	"="
	"break "
	" o"
	"s"
	"					break\n"
	"entit"
	"t"
	" || __entities__=0\n"
	" || "
	"`	\n"
	")); then\n						(("
	"if "
	"					fi\n"
	":-"
	"s"
	"	# go on, do it for the kids.\n"
	"pn"
	"	\n"
	"	#VERBOSE=1\n	#DRYRUN=0\n	#LOCKTIMEOUT=86400\n"
	"	# vvvvv change preset global variables.\n"
	"#      ^^^^^^^^^^ on failure, check $PATH setting.\n"
	"	# vvvvv declare/initialise global variables.\n\n"
	"if"
	"f"
	"[[ is.root ["
	"s"
	"_if_not_root"
	"d"
	"s"
	"re"
	"	# vvvvv delete below if multiple instances on this script are permitted.\n	exit_if_already_running\n"
	"	# vvvvv scripting starts here.\n\n		# to include a basic options handling code fragment, \n		# use std-args.inc.sh or std-args.inc.min.sh\n\n"
	"# vvvvv functions\n\n\n\n# there are default cleanup() and usage() stubs in std.sh\n# but you should really do your own as the code develops. \n# usage: cleanup [exitcode]\n"
	"\n"
	"\n"
	"# vvvvv call user main() function above, or we won't go very far.\n"
	"# vvvvv main\n# i like using a main() structure to keep everything orderly. \n# having it means you have to call main() a the very end of the script.\n# you don't absolutely must use this. just '. entities.bash' and off you go.\n"
	"# ENTITIES FOR BASH - standard script editing template for starting new scripts.\n# To get a minimal version of this template without comments use std-template.min.sh.\n"
	"# vvvvv code below this line --------------------------------------------------------\n"
	"	# vvvvv delete below if non-root users are permitted to execute.\n"
	"	# cleanup temp files and processes before exit.\n	# if using exit_if_already_running function, .lock file must be deleted on exit.\n	#lockfiles.delete.all\n"
	"#    if word exit is used, immediately exit the script.\n"
	"	# for processing parameters/options use the std-args.inc.sh code fragment in main()\n"
	"# usage: usage [exit]\n"
	"			"
	"	"
	"uf "
	"uf"
	" &&"
	" ||"
	" "
	"="
	"#!/bin/bash\nsource entities.bash || exit 1\n	verbose.set on\n	strict.set on\n\nmain() {\n	is.root || { msg.err \"Require root access.\"; exit 1; }\n	\n	\n	\n}\n\ncleanup() {\n	if [[ \"${1:-}\" == '' ]];	then exitcode=\"$?\"\n														else exitcode=\"$1\"\n	fi\n	exit $exitcode\n}\n\nusage() {\n	cat <<-usage\n		Usage: $PRG \n		\n	usage\n	[[ ${1:-} == 'exit' ]] && exit 1\n	return 0\n}\n\nmain \"$@\"\n#fin\n"
	"\n"
	"\n"
	"\n"
	"\n"
	"#!/bin/bash\nsource entities.bash || exit 1\n	verbose.set on\n	strict.set on\n\nmain() {\n	is.root || { msg.err \"Require root access.\"; exit 1; }\n	\n	\n	\n}\n\ncleanup() {\n	if [[ \"${1:-}\" == '' ]];	then exitcode=\"$?\"\n														else exitcode=\"$1\"\n	fi\n	exit $exitcode\n}\n\nusage() {\n	cat <<-usage\n		Usage: $PRG \n		\n	usage\n	[[ ${1:-} == 'exit' ]] && exit 1\n	return 0\n}\n\nmain \"$@\"\n#fin\n"
	"	# handle options\n"
	"-?|"
	"s"
	"ise."
	"	VERBOSE=1 "
	"	"
	"	VERBOSE=0 "
	"echo "
	"se"
	"t"
	"ech"
	"\n				# for scripts that use lists of non-option arguments.\n				# delete references to cmd if this not used.\n				"
	"				# for scripts that do not use non-option arguments, \n				# include msgdie to exit with error message.\n				# may want to remind user of usage first.\n				#usage\n				#msgdie log \"Bad command line argument '$1'!\"\n"
	"			--myopt)\n				shift\n				myvar=$1\n				;;\n"
	" \n				"
	"		"
	"	\n	cmd=()\n	while (($#)); do\n		case \"$1\" in\n			-V|--version)	set.version; exit 0;;\n			-h|--help)		usage exit 1;;\n			-v|--verbose)	verbose.set on;;\n			-q|--quiet)		verbose.set off;;\n			*)						cmd+=( \"$1\" );;\n		esac\n		shift\n	done\n\n\n\n"
done
file_pos
	2 "/usr/share/okusi/entities/entities.scripts/_linkscripts2entities"
	0 "install.entities"
	33 "_make.minimal.bash"
	308 "/usr/share/okusi/entities/install.entities"
	4 "/usr/share/okusi/lsd/lsd"
	5 "/usr/share/okusi/entities/tmp/t2"
	6 "/usr/share/okusi/entities/tmp/t3"
	4 "/usr/share/okusi/entities/tmp/t1"
	2 "t1"
	0 "t1~"
	2 "t2"
	2 "t3"
	0 "tt~"
	46 "/usr/share/okusi/entities/entities.bash"
	51 "tt"
	30 "templates/std-template.sh"
	0 "/usr/share/okusi/entities/templates/std-args.inc.sh"
	0 "/usr/share/okusi/entities/t"
	0 "t"
done
colors
	"xterm-256color" "default"
done
