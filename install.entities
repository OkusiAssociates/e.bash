#!/bin/bash
useage() {
	echo "$(basename $0)"
	echo 'entities.bash installation script.'
	[[ "${USER:-}" == 'root' || $EUID == 0 ]] \
			|| { echo ''; echo "Requires root to install. Current user is [${USER:-}]."; }
	echo ''
	echo "Usage: $(basename $0) [-y|--auto] [--dev] [-n|--nouserprofiles]"
	echo '           [-i|--install] [-h|--help]'
	echo ''
	exit 1
}
	[[ "$@" == "" || "$@" == *"--help"* || "$@" == *"/?"* || "$@" == *-h* ]] && useage
	[[ ${USER:-} == 'root' || ${EUID} == 0 ]] || useage

	declare -i production=0
	declare -i autoinstall=0
	declare -i install=0
	declare -i userprofiles=1
	
	declare etc_profile_d="/etc/profile.d/entities.env.sh"

	# make an announcement
	echo "This is the entities.bash installation script."
	echo "You will be prompted before installation proceeds."
	echo ''

	# make absolutely certain we have identified the canonical entities.bash script
	PRG="$(basename $(/bin/readlink -f "${0:-}"))"
	PRGDIR="$(/usr/bin/dirname $(/bin/readlink -f "${0:-}"))"
	if [[ -f "$PRGDIR/entities.bash" ]]; then	# located in the same directory as this script.
		canonical="$PRGDIR/entities.bash"
	else
		echo >&2 -e "Could not find entities.bash in the [$PRGDIR] directory.\nHas it been installed properly?"
		exit 1
	fi	
	OPRG=$PRG; OPRGDIR=$PRGDIR
	
	OENTITIES=${ENTITIES:-}; ENTITIES=$PRGDIR 
	source $canonical new || { echo >&2 "Could not open [$canonical]!"; exit 1; }
	ENTITIES=$OENTITIES;
	PRG=$OPRG; PRGDIR=$OPRGDIR

	# let's start
	strict.set on
	trap.set on
	cd "$PRGDIR" || msg.die "Could not change into directory $PRGDIR!!"

	# set ENTITIES as the destination (production) directory
	# 	ENTITIES in this case is the destination directory for the install
	ENTITIES='/lib/include/entities'
	mkdir -p $ENTITIES
	
	# are we trying to install into the install directory?
	[[ $ENTITIES == $PRGDIR ]] &&	msg.die "Cannot install over installation directory!"		

	# get rid of old symlinks (legacy; remove soon)
	declare -a del=()
	del=( $( find $PRGDIR -type l | grep -v 'docs/' | grep -v "./entities$" | grep -v '/string.inc.php$' | grep -v '/entities.help' ) ) || del=()
	for l in ${del[@]:-}; do msg.info "* removing $l"; rm "$l"; done

	declare env_entities
	env_entities="$(cat <<-eot
	
			# Entities for Bash
			#   * Add '${ENTITIES}' path to PATH
			#   * export ENTITIES='${ENTITIES}'
			# Installed by $(readlink -f "$0")
			#   on $(date +'%F %T').420 by ${USER:-}@${HOSTNAME}
			# https://github.com/OkusiAssociates/entities.bash
			if [[ ":\${PATH}:" != *":${ENTITIES}:"* ]]; then
			  PATH=\${PATH}:${ENTITIES}
			  export PATH
			fi
			ENTITIES=${ENTITIES}
			export ENTITIES
		
		eot
		)"

	declare -a exclude=( t tt *~ *.bak *.old gudang/ .gudang/ *.zip mkdistzip _* dev/ )

main() {
	while (($#)); do
		case "$1" in
			--dev|-p|--production)	production=1;;
			-y|--auto)							autoinstall=1;;
			-n|--nouserprofiles)		userprofiles=0;;
			-i|--install)						install=1;;
			-v|--verbose)						verbose.set on;;
			-q|--quiet)							verbose.set off;;
			-h|--help)							useage;;
			*)											msg.die log "Bad command line argument '$1'";;
		esac
		shift
	done
	
	((autoinstall)) && color.set off

	msg.info "entities.bash shall be installed to $ENTITIES."
	if [[ -f $ENTITIES/entities.bash ]]; then
		msg.warn "A version of entities is already installed at $ENTITIES."
	fi
	
	if ((autoinstall==0)); then
		infotext
		ask.yn 'Install entities.bash with these settings?' || msg.die 'Exiting...'
		msg ''
	fi

	if ((production)); then
		msg.sys "Production: Updating help files and creating entities.min.bash"
		tab.set ++
		msg.sys "Updating entities help files..."
		$PRGDIR/docs/entities.help.make --auto	|| msg.die "[PRGDIR=$PRGDIR] entities.help.make failed!"
		#if [[ -x entities.scripts/_linkscripts2entities ]]; then
		#	msg.info "Running linkscripts2entities"
		#	cd entities.scripts || msg.die "could not cd into entities.scripts!"
		#	./_linkscripts2entities || msg.die "Error in ./linkscripts2entities!"
		#	cd "$PRGDIR" || msg.die "Could not change into directory $PRGDIR!"
		#fi
	fi
	tab.set 1

	msg.sys "Updating entities.min.bash..."
	$PRGDIR/util/_make.minimal.bash --auto	|| msg.die "[PRGDIR=$PRGDIR] make entities.min.bash failed!"

	makeprofile
	((userprofiles)) && makeuserprofiles
	makeenvirnonment
	install

	testit

	tab.set 0
	msg '' \
			'Entities has been installed.' \
			'To use, log out of this bash session and log back in.'  \
			'Entities will then be ready to use.' \
			'' \
			'After returning, type the following at the command' \
			'prompt to activate entities functions:' \
			'' \
			'  $ source entities new' \
			''
}

makeprofile() {
	msg.info "Making ${etc_profile_d}..."
	mkdir -p "$(dirname "$etc_profile_d")" || msg.die "could not create $(dirname "$etc_profile_d")"
	echo -e "${env_entities}"	> "$etc_profile_d"			
	chmod 644 "$etc_profile_d" 				|| msg.die "could not chmod $etc_profile_d"
	chown root:root "$etc_profile_d"	|| msg.die "could not chown $etc_profile_d"
}

# Dep: cat touch chmod chown
# Env: HOME USER HOSTNAME
makeuserprofiles() {
	local bashuser user userfile oldprofile profile inent
	msg.info "Making user's .profile ..."
	bashuser=$(
		for u in $(find /home -maxdepth 1 -type d); do 
			user=$(basename "$u");
			if [[ "$(getent passwd "$user" | cut -d: -f7)" == '/bin/bash' ]] ; then 
				echo "$user"
			fi
		done | sort)

	for user in $bashuser; do 
		userfile="/home/$user/.profile"
		msg.info "Making user profile $userfile..."
		if [[ ! -f "$userfile" ]]; then
			tab.set ++
			msg.warn "$userfile was not found. creating..."
			tab.set --
			touch "$userfile"; chown "$user" "$userfile"; chmod 640 "$userfile"
		fi	

		oldprofile=''
		inent=0
		local IFS=$'\n'
		profile="$(cat "$userfile")"	
		for p in ${profile[@]}; do
			pp=$(trim "${p,,}" | tr -d '[:blank:]')
			if ((inent)); then
				[[ "${pp:0:19}" == 'exportentities' ]] && inent=0
			else
				[[ "${pp:0:16}" == '#entitiesforbash' ]] &&	inent=1 || oldprofile+="${p}${LF}"
			fi		
		done

		cat >$userfile <<-user-profile
			${oldprofile}

			${env_entities}			

		user-profile
		chmod 640 "$userfile" 		|| exit 1
		chown "$user" "$userfile" || exit 1
	done
}

# Dep: /etc/environment cat
makeenvirnonment() {
	envfile=/etc/environment
	msg.info "Changing $envfile..."
	tmpfile="$(mktemp --tmpdir 'ent-XXXX')"
	(	cat "$envfile" | while read -r line; do
			env=${line%=*}
			val=${line#*=}; val=${val//\"/}
			case "$env" in
				'')				continue;;
				PATH)			val=${val//:${ENTITIES}/}
									val=${val//${ENTITIES}:/}
									val=${val//::/:}
									echo "PATH=\"$val:$ENTITIES\"";;
				ENTITIES) continue;;
				*)				echo "${env}=\"${val}\"";;
			esac
		done
	) > "$tmpfile"
	echo "ENTITIES=\"$ENTITIES\"" >> "$tmpfile" 
	cp -p "$envfile" "${envfile}~"	|| msg.die "Could not backup $envfile to ${envfile}~!"
	chown root:root "$tmpfile"			|| msg.die "$tmpfile chown error!"
	chmod 644 "$tmpfile" 						|| msg.die "$tmpfile chmod error!"
	mv "$tmpfile" "$envfile"
}


infotext() {
	cat <<-info-text

		entities.bash installation script shall do the following: 
		  * Copy all script files to a common accessible direcory.
		      Files will be copied to: $ENTITIES
		  * Add a path to [PATH] for the Entities [include] directory.
		      Include path is: $ENTITIES
		  * Add Entities path to [/etc/profile.d].
		      [profile.d] script name is: $etc_profile_d
		  * Add Entities to [/home/*/.profile] of /home/users 
		      Only where bash shell is specified.		

		current environment:
		  ENTITIES=[$ENTITIES]
		  BASH_SOURCE=[$BASH_SOURCE]
		  PRG=[$PRG]
		  PRGDIR=[$PRGDIR]
		  \$0=[$0]
		  
	info-text
}

# Dep: mkdir cd rsync find ln touch cp
install() {
	msg.info "Installing Entities into ${ENTITIES}..."

	cd "$PRGDIR" || exit 1
	
	declare excl=''
	for e in "${exclude[@]}"; do excl+=" --exclude $e"; done

	# do backup of existing $ENTITIES directory
	msg.info "Doing backup of existing $ENTITIES directory..."
	tab.set ++
	if [[ -d "${ENTITIES}.old" ]]; then
		if [[ -d "${ENTITIES}" ]]; then
			msg.info "* Deleting $ENTITIES.old."
			rm -rf "${ENTITIES}.old"	
		fi
	fi
	if [[ -d "${ENTITIES}" ]]; then
		msg.info "* Renaming $ENTITIES to $ENTITIES.old."
		mv "${ENTITIES}" "${ENTITIES}.old" || exit 1
	fi
	tab.set --

	# start creating $ENTITIES
	msg.info "Start creating $ENTITIES"
	mkdir -p "$ENTITIES" || exit 1	
	[[ -d "$ENTITIES" ]] || exit 1
	rsync -av $excl entities.bash 			"$ENTITIES/" >/dev/null		|| exit 1
	rsync -av $excl entities.min.bash 	"$ENTITIES/" >/dev/null		|| exit 1

	mkdir -p "$ENTITIES/entities.d"
	rsync -avl entities.d/*	"$ENTITIES/entities.d/" >/dev/null	|| exit 1

	mkdir -p "$ENTITIES/php"
	rsync -avl $excl php/*				"$ENTITIES/php/" >/dev/null					|| exit 1

	mkdir -p "$ENTITIES/docs/help"
	rsync -avl $excl docs/*				"$ENTITIES/docs/" >/dev/null				|| exit 1

	mkdir -p "$ENTITIES/templates"
	rsync -avl $excl templates/*	"$ENTITIES/templates/" >/dev/null	|| exit 1

	mkdir -p "$ENTITIES/util"
	rsync -avl $excl util/*			"$ENTITIES/util/" >/dev/null				|| exit 1

#	if [[ ! -L "$ENTITIES/entities-user.inc.sh" ]]; then
#		ln -s ~/entities-user.inc.sh "$ENTITIES/entities-user.inc.sh"
#	fi

	# make symlinks in $ENTITIES directory
	msg.info "Make symlinks in $ENTITIES directory..."
	cd "$ENTITIES" 																|| exit 1
	ln -fs php/string.inc.php	string.inc.php    	|| exit 1
	ln  -s entities.bash entities						    	|| exit 1
	
	# touch420 all files in $ENTITIES directory
	msg.info "Fix owner/perms, touch420 all files in $ENTITIES directory..."
	cd "$ENTITIES" || exit 1
	chown root:root * -R
	declare IFS=$'\n'
	for f in $(find | grep -v ".g"); do 
		[[ -d "$f" ]] && chmod 775 "$f" || chmod u+rw,g+rw,o+rw "$f"
		fd=$(stat "$f" -c '%y');
		fd=${fd%% *} 
		touch -h -d "$(date +'%F 04:20:00' -d $fd)" "$f"
	done

	# back to base	
	cd "$PRGDIR"
}

testit() {
		# test it
		cd "$ENTITIES" || { echo >&2 'wtf?'; exit 1; } 
		strict.set off
		trap.set off
		source entities.bash new || { echo >&2 'wtf??'; exit 1; }
		strict.set on
		trap.set on
}


main "$@"
#fin
