#!/bin/bash
useage() {
	echo "$(basename "$0"): Entities installation script"
	if [[ "${USER:-}" -ne 'root' ]] || ((EUID > 0)); then
		echo >&2 "Requires root to install. Current user is [${USER:-}]."
	fi
	echo "Usage: $(basename "$0") [-y|--auto] [-i|--install] [--dev]"
	exit ${1:-0}
}
	# cries for help.
	[[ "$@" == '' || "$@" == *"--help"* || "$@" == *"/?"* || "$@" == *-h* ]] && useage 0
	# not root say bye
	[[ "${USER:-}" == 'root' || $EUID == 0 ]] || useage 1

	declare -ix MajorVer=1 MinorVer=0

	declare -i production=0
	declare -i autoinstall=0
	declare -i install=0
	
	declare etc_profile_d="/etc/profile.d/entities.env.sh"

	# make absolutely certain we have identified the canonical entities.bash script
	PRG="$(basename "$(/bin/readlink -f "${0:-}")")"
	PRGDIR="$(/usr/bin/dirname "$(/bin/readlink -f "${0:-}")")"
	if [[ -f "$PRGDIR/entities.bash" ]]; then	# located in the same directory as this script.
		canonical="$PRGDIR/entities.bash"
	else
		echo >&2 "$PRG: Could not find entities.bash in the [$PRGDIR] directory."
		echo >&2 "$PRG: Check that it has been installed properly."
		exit 1
	fi	
	OPRG=$PRG; OPRGDIR=$PRGDIR
	
	OENTITIES=${ENTITIES:-}; ENTITIES=$PRGDIR 
	source "$canonical" new || { echo >&2 "$PRG: Could not open [$canonical]!"; exit 1; }
	ENTITIES=$OENTITIES;
	PRG=$OPRG; PRGDIR=$OPRGDIR

	# ==========================================================================
	# let's start
	strict.set off
	verbose.set on
	debug.set off
	trap.set on
	msg.prefix.set 'entities.bash'
	cd "$PRGDIR" || msg.die "Could not change into directory [$PRGDIR]"

	msg.info "Source entities directory is [$canonical]"

	# set ENTITIES as the destination (production) directory
	# 	ENTITIES in this case is the destination directory for the install
	ENTITIES='/lib/include/entities'
	mkdir -p "$ENTITIES" || exit 2
	
	# are we trying to install into the install directory?
	[[ $ENTITIES == "$PRGDIR" ]] &&	msg.die "Cannot install over installation directory!"		

	# get rid of old symlinks (legacy; remove soon)
#	declare -a del=()
#	del=( $( /usr/bin/find $PRGDIR -type l | grep -v 'docs/' | grep -v "./entities$" | grep -v '/string.inc.php$' | grep -v '/entities.help' ) ) || del=()
#	for l in ${del[@]:-}; do msg.info "* removing $l"; rm "$l"; done

	declare env_entities
	env_entities="$(cat <<-eot
	
			#X entities.bash begin
			#X entities $_ent_VERSION
			#X   * export ENTITIES='${ENTITIES}'
			#X Installed by $(readlink -f "$0")
			#X   on $(date +'%F %T').420 by ${USER:-}@${HOSTNAME}
			#X https://github.com/OkusiAssociates/entities.bash
			ENTITIES="${ENTITIES}"
			export ENTITIES
			#X entities.bash end

		eot
		)"

	# Exclusions for rsync
	declare -a exclude=( 't' 'tt' '*~' '*.bak' '*.old' 'gudang/' '.gudang/' '*.zip' 'mkdistzip' '_*' 'dev/' 'test/' 'tmp/' 'temp/' )
	declare SyncExclude="/tmp/$PRG-exclusions-$RANDOM"
	>"$SyncExclude"
	declare _l; for _l in "${exclude[@]}"; do	echo "${_l}"; done >>"$SyncExclude"; unset _l
			
main() {
	while (( $# )); do
		case "$1" in
			--dev|-p|--prod*)			production=1;;
			-y|--auto)						autoinstall=1; install=1;;
			-i|--install)					install=1;;
			-v|--verbose)					verbose.set on;;
			-q|--quiet)						verbose.set off;;
			-h|--help)						useage;;
			*)										msg.err log "Bad command line argument '$1'"
														return 1;;
		esac
		shift
	done
	(( ! install )) && return 0
	
	msg.info "entities.bash shall be installed to [$ENTITIES]."
	if [[ -f "$ENTITIES/entities.bash" ]]; then
		msg.warn "A version of entities.bash is already installed at [$ENTITIES]."
		msg.warn "It shall be backed-up to [$ENTITIES/entities.bash.old]."
	fi
	
	if (( ! autoinstall)); then
		infotext
		ask.yn 'Install with these settings?' \
				|| { msg 'Exiting'; return 0; }
		msg 'Installing'
	fi

	if ((production)); then
		msg.sys "Production: Updating help files..."
		"$PRGDIR/entities.help.make" --auto	|| msg.die "[PRGDIR=$PRGDIR] entities.help.make failed!"
		# make new version file
		declare _verfile="$PRGDIR/entities.d/entities.version.bash"
		source "$_verfile" || msg.die "Could not source $_verfile!"

		[[ -z ${_ent_VERSION:-} ]] && msg.die "Version has not been set. See $_verfile"
		declare -ia _arr
		_arr=( ${_ent_VERSION//./ } )
		declare -i dayssince
		dayssince=$(( ($(date +%s) - $(date +%s -d '2019-06-21')) / (60*60*24) ))
		_arr[2]=420
		(( _arr[3] == dayssince )) || { _arr[3]=${dayssince}; _arr[4]=0; } 
		_arr[4]+=1
		_p=${_arr[*]}
		cat >"$_verfile" <<-etx
			#!$(which bash)
			#X Global   : _ent_VERSION 
			#X Desc     : Return version/build of this entities.bash.
			#X          : Returns string in form:
			#X          :   majorver.minorver.420.day0.build
			#X          : Where:
			#X          :   majorver  ${MajorVer}
			#X          :   minorver  ${MinorVer}
			#X          :   420       constant
			#X          :   day0      days since 2019-06-21 ($dayssince)
			#X          :   build     this is build #${_arr[4]} on day $daysince
			#X          : This is entities.bash version ${_p// /.}
			declare -xg _ent_VERSION
			_ent_VERSION='${_p// /.}'
			#fin
		etx
		source "$_verfile" || exit 2
		unset _verfile _arr dayssince
		#if [[ -x entities.scripts/_linkscripts2entities ]]; then
		#	msg.info "Running linkscripts2entities"
		#	cd entities.scripts || msg.die "could not cd into entities.scripts!"
		#	./_linkscripts2entities || msg.die "Error in ./linkscripts2entities!"
		#	cd "$PRGDIR" || msg.die "Could not change into directory $PRGDIR!"
		#fi
	fi

	"$PRGDIR/entities.make.minimal" --auto	|| msg.die "[PRGDIR=$PRGDIR] make entities.bash.min failed!"

	makeprofile

	makeenvirnonment

	install

	testit

	msg.line '-'
	msg '' \
			"entities.bash ${_ent_VERSION} has been installed." \
			'To use, log out of this bash session and log back in.'  \
			'Entities will then be ready to use.' \
			'' \
			'After returning, type the following at the command' \
			'prompt to activate entities functions:' \
			'' \
			'  $ source entities new' \
			''
	rm -f "$SyncExclude"
}

makeprofile() {
	msg.info "Making ${etc_profile_d}..."
	mkdir -p "$(dirname "$etc_profile_d")" || msg.die "could not create $(dirname "$etc_profile_d")"
	echo -e "${env_entities}"	> "$etc_profile_d"			
	chmod 644 "$etc_profile_d" 				|| msg.die "could not chmod $etc_profile_d"
	chown root:root "$etc_profile_d"	|| msg.die "could not chown $etc_profile_d"
}

# Dep: /etc/environment cat
makeenvirnonment() {
	envfile=/etc/environment
	msg.info "Changing $envfile..."
	tmpfile="$(mktemp --tmpdir 'ent-XXXX')"

	( while read -r line; do
			env=${line%=*}
			val=${line#*=}; val=${val//\"/}
			case "$env" in
				'')					continue;;
				'ENTITIES')	continue;;
				*)					echo "${env}=\"${val}\"";;
			esac
		done
	) <"$envfile" >"$tmpfile"
	echo "ENTITIES=\"$ENTITIES\"" >> "$tmpfile" 
	cp -p "$envfile" "${envfile}~"	|| msg.die "Could not backup $envfile to ${envfile}~!"
	chown root:root "$tmpfile"			|| msg.die "$tmpfile chown error!"
	chmod 644 "$tmpfile" 						|| msg.die "$tmpfile chmod error!"
	mv "$tmpfile" "$envfile"
}


infotext() {
	tab.set ++
	msg "This entities.bash installation script shall do the following: " \
	 "  * Copy all script files to directory [$ENTITIES]" \
	 "  * Add Entities path to /etc/profile.d [$etc_profile_d]" \
	 "Current environment:" \
	 "  ENTITIES=[$ENTITIES]" \
	 "  BASH_SOURCE=[$BASH_SOURCE]" \
	 "  PRG=[$PRG]" \
	 "  PRGDIR=[$PRGDIR]" \
	 "  \$0=[$0]"
	tab.set --
}

# Dep: mkdir cd rsync find ln touch cp
install() {
	msg.info "Installing Entities into ${ENTITIES}..."

	cd "$PRGDIR" || exit 2
	
#	declare excl=''
#	for e in "${exclude[@]}"; do excl+=" --exclude $e"; done

	# do backup of existing $ENTITIES directory
	msg.info "Doing backup of existing $ENTITIES directory..."
	if [[ -d "${ENTITIES}.old" ]]; then
		if [[ -d "${ENTITIES}" ]]; then
			msg.info "* Deleting $ENTITIES.old."
			rm -rf "${ENTITIES}.old"	
		fi
	fi
	if [[ -d "${ENTITIES}" ]]; then
		msg.info "* Renaming $ENTITIES to $ENTITIES.old."
		mv "${ENTITIES}" "${ENTITIES}.old" || { msg.err "$(errno $?)" "Could not move [${ENTITIES}] to [${ENTITIES}.old]"; exit 1; }
	fi

	# start creating $ENTITIES
	msg.info "Start creating $ENTITIES"
	mkdir -p "$ENTITIES" || exit $?
	[[ -d "$ENTITIES" ]] || exit $?

	/usr/bin/rsync -av  --exclude-from "$SyncExclude" entities.bash 		 "$ENTITIES/" >/dev/null || exit 1
	/usr/bin/rsync -av  --exclude-from "$SyncExclude" entities.bash.min  "$ENTITIES/" >/dev/null || exit 1
	/usr/bin/rsync -av  --exclude-from "$SyncExclude" entities.help      "$ENTITIES/" >/dev/null || exit 1
	/usr/bin/rsync -av  --exclude-from "$SyncExclude" entities.help.make "$ENTITIES/" >/dev/null || exit 1

	mkdir -p "$ENTITIES/entities.d"
	/usr/bin/rsync -avl --exclude-from "$SyncExclude" entities.d/*			"$ENTITIES/entities.d/" >/dev/null || exit 1

	mkdir -p "$ENTITIES/scripts"
	/usr/bin/rsync -avl --exclude-from "$SyncExclude" scripts/*					"$ENTITIES/scripts/" >/dev/null || exit 1

	mkdir -p "$ENTITIES/docs/help"
	/usr/bin/rsync -avl --exclude-from "$SyncExclude" docs/*						"$ENTITIES/docs/" >/dev/null || exit 1

	# make symlinks in $ENTITIES directory
	msg.info "Make symlinks in [$ENTITIES] directory..."
	cd "$ENTITIES" 																|| exit 2
	# execute permissions on entities	
	chmod 775 entities.bash entities.bash.min			|| exit $?
	# in production, entities points to the min version
	ln  -fs entities.bash.min entities				    || exit $?
	ln  -fs entities.bash.min entities.min		    || exit $?


	# MAIN EXECUTABLE in /usr/local/bin/ || /usr/bin
	if [[ -d /usr/local/bin ]]; then
		ln -fs "$ENTITIES/entities.bash" /usr/local/bin/entities
	else
		ln -fs "$ENTITIES/entities.bash" /usr/bin/entities
	fi

	# touch420 all files in $ENTITIES directory
	msg.info "Fix owner/perms, touch420 all files in [$ENTITIES] directory..."
	cd "$ENTITIES" || exit 2
	chown root:root ${ENTITIES}/* -R
	declare IFS=$'\n'
	for f in $(/usr/bin/find | grep -v ".g"); do 
		if [[ -d "$f" ]]; then
			chmod 775 "$f"
		else 
			chmod u+rw,g+rw,o+rw "$f"	#should this be 555??
		fi
		fd=$(stat "$f" -c '%y');
		fd=${fd%% *} 
		/usr/bin/touch -h -d "$(date +'%F 04:20:00' -d "$fd")" "$f"
	done

	# back to base	
	cd "$PRGDIR"
}

testit() {
		# test it
		cd "$ENTITIES" || { echo >&2 'wtf?'; exit 1; } 
		strict.set off
		trap.set off
		source entities.bash new || { echo >&2 'wtf??'; exit 1; }
		strict.set on
		trap.set on
}

make.syncexclude() {
	cat >"$SyncExclude" <<-EOT
		~*
		.~*
		*~
		*.bak
		*.c
		CbgTerakhir
		DEADJOE
		.*/DEADJOE
		deluser.sh
		desktopokusi-do-not-use
		dev/
		.git
		.git/
		.gitignore
		.gudang/*
		*/gudang/
		gudang/
		ip2nation/
		ips.okusi
		iptables-save
		IPTables.txt
		*.lock
		*.log
		mktarball
		obd-script.lst
		obd-zip-script
		okusi-script.lst
		old/
		Pakta/pakta.*
		XXXmkuser/skel14/*
		mkuser/skel12/*
		shadow.bak
		spam/
		spool/*
		.ssh/*
		syncexclude
		synclist
		synclist-opt
		t
		*/t/*
		t1
		t2
		taskmaster.continue
		.taskmasterid
		taskmaster.lock
		*/temp/*
		temp/*
		*/tmp/*
		tmp/*
		tt

	EOT
}


main "$@"
#fin
