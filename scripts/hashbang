#!/bin/bash
# shellcheck disable=SC1091
source entities || exit 2
	strict.set off
	verbose.set "$([[ -z $PS1 ]] && echo 'on' || echo 'off')"

	declare -ax hb_PRUNE
	if [[ -z "${hb_PRUNE[*]:-}" ]]; then
		hb_PRUNE=( '~*' '*gudang' '*.gudang' '*.old' '*.bak' '*dev' '*help' '*cctv' '*.git' '*git' )
	fi

	declare -ax hb_EXCLUDE
	if [[ -z "${hb_EXCLUDE[*]:-}" ]]; then
		hb_EXCLUDE=( '~' 'gudang/' '.old' '.bak' 'dev/' '.png' '.jpg' '.mp3' '.mp4' '.iso' 'help/' '.zip' '.git' )
	fi

	declare -i hb_MAX_FILESIZE
	hb_MAX_FILESIZE=${hb_MAX_FILESIZE:- 30000}

hashbang_main() {
	version.set '0.97'
	local dir='' search='' hashbang='bash' prefix='' suffix='' LF=$'\n' padfix=' '
	local -a gcmd=()
	local -i ccc=0 hbExclude=0 maxdepth=5
	while (( $# )); do
		if [[ "${1:0:1}" == '-' ]]; then
			case "$1" in
				-s|--search)		shift; search="${1:-}" ;;
				-m|--maxdepth)  shift; maxdepth=${1:- 1} ;;
				-z|--maxsize)		shift; hb_MAX_FILESIZE=${1:- 30000};;
				-f|--padfix)		shift; padfix="${1:-}" ;;
				-p|--prefix)		shift; prefix="${1:-}${padfix}" ;;
				-x|--suffix)		shift; suffix="${padfix}${1:-}" ;;
				-X|--hb-exclude)
												hbExclude=1;;
				-Y|--no-hb-exclude)
												hbExclude=0;;
				-e|--exclude)		shift; hb_EXCLUDE+=( "$1" ); hbExclude=1;;
				-b|--hashbang)	shift; hashbang=${1:-bash};;
				-l|--nolf)			LF='' ;;
				-v|--verbose|+q)
												verbose.set on ;;
				-vv|-v2|--D|--debug)
												debug.set on ;;
				-q|--quiet|+v)	verbose.set off; debug.set off;;
				-V|--version)		printTitle; return 0 ;;
				-h|--help)			usage; return 0	;;
				--)							shift
												gcmd+=( "$@" )
												break;;
				*)							gcmd+=( "$1" ) ;;
			esac
		else
			if (( ! ${#dir} )); then
				dir="$1"
			else
				gcmd+=( "$1" )
			fi				
		fi
		shift
	done
	
	[[ -z "${dir}" ]] 			&& dir='.'
	[[ -z "${gcmd[*]:-}" ]]	|| gcmd+=( '-l' )
	# shellcheck disable=SC2154
	((_ent_VERBOSE))				|| gcmd+=( '-s' )
	
	# report
#	(( ${#prefix} )) 		&& printf '%s\n' "$hashbang"
	msg "# $PRG $dir --hashbang '$hashbang'"
	(( ${#search} ))				&& msg " --search '$search'"
	(( hbExclude ))					&& msg " --hb-exclude"
	[[ ${padfix} != ' ' ]]	&& msg " --padfix '${padfix}'"
	(( ${#prefix} ))				&& msg " --prefix '${prefix}'"
	(( ${#suffix} ))				&& msg " --suffix '${suffix}'"
	(( ! ${#LF} ))					&& msg " --nolf"
	(( ${#gcmd[@]} ))				&& msg " --grep ${gcmd[*]}"
	msg '\n'
	
	if ((hbExclude)) && [[ -z ${hb_EXCLUDE[*]} ]]; then
		((_ent_VERBOSE)) && msg.warn "hb_EXCLUDE array envvar has not been set."
		hbExclude=0
	fi

	# execute
	local xpath='' xdot=''
	if ((hbExclude)); then
		[[ ${dir:0:2} == './' ]] && xdot='./'
		[[ ${dir:0:3} == '../' ]] && xdot='../'
		for p in "${hb_PRUNE[@]}"; do xpath+="-type d -path '${xdot}${p}' -prune -o "; done
	fi
	files=( $(find -O2 "${dir}" -maxdepth "${maxdepth}" $xpath \( -type f -print \)) )
	local file='' e
	local -i incl=1
	for file in "${files[@]:-}"; do
		[[ -z $file ]] && continue
		# exclude files
		if ((hbExclude)); then
			for e in "${hb_EXCLUDE[@]}"; do
				if [[ $file == *"$e"* ]]; then
					is.debug && msg.warn "Excluded [$file] because of [$e]"
					incl=0
					break
				fi
			done 
			(( ! incl )) && { incl=1; continue; }
		fi
		# head/type examination
		ft="$(textfiletype -t "$file")"
		[[ $ft == 'sh' ]] && ft='bash'
		if [[ $ft == "$hashbang" ]]; then
			if (( ${#search} )); then
				if (( $(stat -c %s "$file") < hb_MAX_FILESIZE )); then
					# shellcheck disable=SC2086
					grep -I -m1 ${gcmd[*]:-} "$search" "$file" >/dev/null || file=''
				else
					file=''
				fi
			fi
			if [[ -n "${file}" ]]; then
				ccc+=1
				printf '%s%s%s %s' "${prefix}" "${file}" "${suffix}" "$LF"
			fi
		fi
	done
	[[ -n ${LF} ]] || printf '\n'
	msg "# ${ccc} file$( ((ccc != 1)) && echo 's') found\n"
	return 0
}
cleanup() {
	local -i err=${1:-}
	exit "$err"
}

msg() {
	((_ent_VERBOSE)) && echo -en "${1:-}" 
	return 0
}
msg.warn() {
	echo >&2 -e "$PRG: $*"
}

printTitle() { echo "$(basename "$0") vs $(version.set)" ; return 0; }

usage() {
	local PRG
	PRG="$(basename "$0")"
	cat <<-ETX
	Script  : $PRG
	Version : $(version.set)
	Desc    : Use 'find' and 'grep' to search directory recursively for files 
	        : identified as bash scripts, ignoring all other files. 
	        : Identification is by filename extension, a hashbang 
	        : containing '/bash', or by result from 'file' command.
	Synopsis: $PRG ["dir"] [-s str] [-b php|php] [-X][-Y][-e]
	        :          [-p str][-x str][-f str] [-l] [-v][-q] [--] 
	        :   dir                    Directory to start search (def. '.')
	        :   -s|--search "str"      String to find in found files.
	        :   -b|--hashbang bash|php File type to search (def. $hashbang)
	        :   -X|--hb-exclude        Exclude using envvar hb_EXCLUDE.
	        :   -Y|--no-hb-exclude     Do not use hb-exclude.
	        :   -e|--exclude 'expr'    Add 'expr' to hb_EXCLUDE. Enables -X; 
	        :                          re-disable with -Y.
	        :   -f|--padfix "str"      Spacer for pre/suffix (def. ' '). 
	        :                          For no spacer: -f ''
	        :   -p|--prefix "prefix"   Prefix found files with "prefix".
	        :   -x|--suffix "suffix"   Suffix found files with "suffix".
	        :   -l|--nolf              No line feed at end of filename.
	        :   -v|--verbose           Verbose (default). Enable messages.
	        :   -D|--debug             Increase verbosity. Enables -v.
	        :   -q|--quiet             No messages. Disables -v -D.
	        :   --|--grep              Pass remaining parameters to grep.
	        : Note: All non-hashbang options are passed onto grep.
	 Example: # 0. recursively find all qualified bash script filenames
	        : $PRG                   
	        : 
	        : # 1. print bash filenames for string matching pattern
	        : hashbang -s '^whereisit' 
	        : 
	        : # 2. print bash filenames containing string 'varname' in format 
	        : #    "p {filename} -s". Useful for generating temporary scripts.
	        : #    In this case, I wish to edit {filename} (using the entities 
	        : #    'p' editor) with shellcheck enabled.
	        : hashbang -s 'some_var_name' -p 'p' -x '-s' >editfiles
	ETX
}

hashbang_main "$@"
#fin
