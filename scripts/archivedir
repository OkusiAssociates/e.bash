#!/bin/bash
# #! shellcheck disable=SC
source entities || exit 2
	trap.set on
	strict.set off
	# shellcheck disable=SC2154
	version.set "${_ent_VERSION}"
	msg.prefix.set "$PRG"
	
	# global vars
	declare -- ArchiveDir='' \
						 OldArchiveDir=''
	declare -i PruneLimit=0
	
# main
main() {
	local -i hidden=0 listonly=0
	local -a args=()
	while (( $# )); do
		case "$1" in
			-P|--prune)			shift; PruneLimit=${1:-0};;
			-H|--hidden)		hidden=1;;
			-l|--list)			listonly=1;;
			-v|--verbose)		verbose.set on;;
			-q|--quiet)			verbose.set off;;
			-V|--version)		version.set; return 0;;
			-h|--help)			usage; return 0;;
			-?|--*)					msg.err "Invalid option [$1]"; return 22;;
			*)							(( ${#args[@]} > 1 )) \
													&& { msg.err "Invalid argument [$1]"; return 22; }
											ArchiveDir="$1" ;;
		esac
		shift
	done
	[[ -z $ArchiveDir ]] && { usage; return 1; }

	# remove trailing /
	[[ ${ArchiveDir: -1} == '/' ]] && ArchiveDir=${ArchiveDir:0: -1}

	# test existance
	[[ -d $ArchiveDir ]] || msg.die "Directory [$ArchiveDir] does not exist."	

	ArchiveBase=$(basename "$ArchiveDir")

	OldArchiveDir="$(dirname "$ArchiveDir")/$( ((hidden)) && echo '.' )${ArchiveBase}.old"	
	# create the archive directory
	mkdir -p "$OldArchiveDir" || msg.die "Could not create [$OldArchiveDir]"
	chmod 755 "$OldArchiveDir"
	
	# list only
	if ((listonly)); then
		echo "$( ((hidden)) && echo 'Hidden ' )Archive $OldArchiveDir:"
		ls -la "$OldArchiveDir"
		return 0
	fi	

	# make the zip file
	zipfile="${OldArchiveDir}/${ArchiveBase}.$(date +%s).zip"
	msg "Creating $( ((hidden)) && echo 'Hidden ' )Archive [$zipfile]"
	zip -r "$zipfile" "${ArchiveDir}/" >/dev/null	|| msg.die "Error in zip [$zipfile]"
	chmod 644 "$zipfile"

	# shellcheck disable=SC2012
	msg.info "[$zipfile $(int2hr "$(stat --printf=%s "$zipfile")")] was created. "

	if ((PruneLimit)); then
		args=( $(find "$OldArchiveDir" -name "${ArchiveBase}*.zip" | sort -r) )
		for file in "${args[@]:${PruneLimit}}"; do
			msg.info "Removing old archive [$file]"
			rm "${file:?}"
		done
	fi
	msg "Archive for [$ArchiveBase] complete."
}

# exit trap set to cleanup
# shellcheck disable=SC2086
cleanup() {
	local -i err=$?
	[[ -z ${1:-} ]] && err=$1
	#...
	((err > 1)) && errno $err
	exit $err
}

usage() {
#	0#######:#|##|############|#################################################78
	cat <<-etx
	Script  : $PRG 
	Desc    : Create zip archive of a directory, and store in directory 
	        : called [.]{DirNameBase}.old.  Multiple snap-shots of directores
	        : can be maintained, with option to prune oldest files.    
	        : The zip archive name uses the format {archiveName}.{time}.old
	Synopsis: $PRG dirname [-l limit] [-H] [-v][-q] [-V] [-h]
	        :  -P|--prune    Specify max number of archive files allowed, in
	        :                archive directory, and delete oldest if necessary.      
	        :  -H|--hidden   Create archive directory as hidden (prefix '.')
	        :                Once created as hidden, -H must always be used to
	        :                add new archives to the archive directory.
	        :  -v|--verbose  turn on  msg verbose. (default)
	        :  -q|--quiet    turn off msg verbose.
	        :  -V|--version  print version.
	        :  -h|--help     this help.
	Example : # 0. creates dir /usr/share/usr/.myscripts.old (if it doesn't exist)
	        : #    then makes a zip archive called myscripts.1561065600.zip.
	        : #    -H creates the .old directory as 'hidden', with a leading dot.
	        : $PRG /usr/share/myscripts -H -l 15 
	        : # 1. just archive a directory
	        : $PRG myscripts
	etx
#	0#######:#|##|############|#################################################78
	return 0
}

main "$@"
#fin


