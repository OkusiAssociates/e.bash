#!/bin/bash
##!	shellcheck disable=SC2086
source entities || { echo >&2 "$(basename "$0"): Could not open entities.bash!"; exit 1; }
	strict.set off
	verbose.set on
	trap.set on
	msg.prefix.set "$PRG"
	
	# if by some odd chance entities.bash has not already set EDITOR (it should have)
	if [[ -z "$EDITOR" ]]; then
		EDITOR="$(which joe)" #mefirst
		[[ -n "$EDITOR" ]] && EDITOR+=' -tab 2 --wordwrap --autoindent'
		[[ -z "$EDITOR" ]] &&	EDITOR="$(which nano)"
		[[ -z "$EDITOR" ]] &&	EDITOR="$(which vi)"
		[[ -z "$EDITOR" ]] && { msg.err "Envvar EDITOR not set!"; exit 1; }
	fi
	export EDITOR
	
	tmpfile="/tmp/p-$RANDOM"
	CH9=$'\t'

	declare -i shellcheck=0 syntaxcheck=1

main() {
	local file='' ftype='' ext
	local -i line=0 syntaxerr=0 execute=0
	local -a cmd=()
	while (($#)); do
		case "$1" in
			-l|--line)				shift; line=$((${1:-1})) ;;
			+[[:digit:]*])		line=${1:1} ;;
			-n|--syntaxcheck)	syntaxcheck=1 ;;
			+n|-+syntaxcheck)	syntaxcheck=0 ;;
			-s|--shellcheck)	shellcheck=1 ;;
			+s|-+shellcheck)	shellcheck=0 ;;
			-x|--execute)			execute=1 ;;
			+x|-+execute)			execute=0 ;;
			-h|--help)				usage; return 0 ;;
			-v|--verbose|+q)	verbose on ;;
			-q|--quiet|+v)		verbose off ;;
			-*)								msg.err "Bad option [$1]"; return 22 ;;
			*)								cmd+=( "$1" ) ;;
		esac
		shift
	done
	(( ${#cmd[@]} == 1 )) || { usage; return 0; }

	file="$(readlink -f "${cmd[0]}")" || file="${cmd[0]}"
	
	# file not exist!
	if [[ ! -f "$file" ]]; then
		# look for likely executable script
		sx="$(readlink -f "$(which "$(basename "$file")")")"
		if [[ -z $sx ]]; then
			# locate or create
			sx="$(basename "$file")"
			arr=( $(locate -b "\\$sx") )
			arr+=( "Create: ${file}"  )
		 	select file in "${arr[@]}"; do 
				[[ 'q0' == *"$REPLY"* ]] && return 1
				[[ -z $file ]] && continue
				break
		 	done
		 	[[ ${file:0:8} == 'Create: ' ]] && file="${file:8}"
		fi
		file="$sx"	
	fi
	
	ext="${file##*.}"
	if 		[[ $ext == 'php' ]];	then 
		ftype='php'
		shellcheck=0
	elif 	[[ $ext == 'sh'	|| $ext == 'bash' ]]; then 
		ftype='sh'
	else
		ftype=$(textfiletype -t "$file")
#		[[ $ftype == 'text' || -z $ftype ]]  && ftype='sh'
		[[ $ext == 'sh'	|| $ext == 'bash' ]] && ftype='sh' 
	fi
	
	# Edit it.
	# shellcheck disable=2046
	$EDITOR $( ((line)) && echo "+${line}" ) "$file"

	[[ ! -f $file ]] && return 1
	# has file changed type?
	if [[ $ftype == 'text' || -z $ftype ]]; then
		if [[ ! -z $file ]]; then
			h=$(head -n 1 "$file")
			if [[ $h =~ ^\#\!.*/bash.* ]];  then  
				ftype=sh
			elif [[ $h =~ ^\#\!.*/php.*  || ${h:0:2} == '<?' || ${h:0:5} == '<?php' ]]; then  
				ftype=php
			fi
		fi
	fi

	# syntax check
	if ((syntaxcheck)); then
	syntaxerr=0	
	if [[ "${ftype}" == 'php' ]]; then
		msg.info "$(php -l "${file}" 2>&1 | tee "$tmpfile")"
		hd="$(head -n1 "$tmpfile")"
		if [[ "${hd:0:9}" != 'No syntax' ]]; then
			syntaxerr=1
			l=$(trim "${hd##*on line }")
			if [[ -z "$l" ]]; then line=0
												else line=$(( l ))
			fi
		fi
	else
		if [[ $ftype == 'sh' || $ftype == 'bash' ]]; then
			msg.info "$(bash -n "${file}" 2>&1 | tee "$tmpfile")"
			hd="$(head -n1 "$tmpfile")"
			if [[ "${hd}" != '' ]]; then
				syntaxerr=1
				l="${hd##*: line }"
				l=${l//${CH9}/ }
				l=$(trim "${l%%:*}")
				[[ -z "$l" ]] && line=0 || line=$l
			fi
		fi
	fi
	if ((syntaxerr)); then
		if ask.yn "Re-edit $file [$line]?"; then
			# shellcheck disable=SC2046
			"$PRGDIR/$PRG" "$file" --line "$line" $( ((execute)) && echo '-x' )
			exit
		fi
	fi
	fi
	
	## shellcheck
	if ((shellcheck)) && [[ $ftype == 'sh' || $ftype == 'bash'  ]] ; then
		if [[ -f "$file" ]]; then
			local -- scdisable
			scdisable="$( grep -m 1 '^#\![[:blank:]]*shellcheck[[:blank:]]*disable=' "$file" 2>/dev/null )"
			if [[ -n $scdisable ]]; then
				scdisable=${scdisable#*=}
				scdisable=${scdisable//,/ }
				scdisable="--exclude ${scdisable// /,}"
			fi
			# shellcheck disable=SC2086
			$(which shellcheck) --shell=bash ${scdisable} "$file"
		fi
	fi

	if ((execute && !syntaxerr)); then
		if ask.yn "Execute $file?"; then
			if [[ $ftype == 'php' ]]; then
				$(which php) "$file"
			elif [[ $ftype == 'sh' ]]; then
				$(which bash) "$file"
			fi
		fi
	fi
}


cleanup() {
	local exitcode=$?
	[[ -n "$1" ]] && exitcode=$(($1))
	rm -f "$tmpfile"
	exit $exitcode
}

usage() {
	cat >&2 <<-usage
		Script  : $PRG
		Desc    : Edit/Syntax-Check/ShellCheck/Execute wrapper for 
		        : bash (and php) files.
		        : Bash/php scripts without .sh/.bash/.php extentions 
		        : are autodetected from the header.
		        : Uses envvar EDITOR ([$EDITOR])
		Synopsis: $PRG filename{.sh|.bash|php} [-l row] [-s] [-x]
		        :   -l row  position at row n on entry to editor.
		        :   +n      position at row n on entry to editor.
		        :   -s      execute shellcheck after editing.
		        :   -x      execute script after editting (asks first).
	usage
	return 0
}

main "$@"
#fin
