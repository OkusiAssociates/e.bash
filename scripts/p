#!/bin/bash
#	shellcheck source=../entities.bash.min disable=1091
source entities || { echo >&2 "$(basename "$0"): Could not open entities.bash!"; exit 2; }
	strict.set off
	trap.set on
	# shellcheck disable=SC2154
	version.set "$_ent_VERSION"
	msg.verbose.set on
	msg.color.set on
	msg.prefix.set "$PRG"

	# global vars	
	# if by some odd chance entities.bash has not already set EDITOR (it should have)
	if [[ -z "$EDITOR" ]]; then
		EDITOR="$(which joe)" #mefirst
		[[ -n "$EDITOR" ]] && EDITOR+=' -tab 2 --wordwrap --autoindent'
		[[ -z "$EDITOR" ]] &&	EDITOR="$(which nano)"
		[[ -z "$EDITOR" ]] &&	EDITOR="$(which vi)"
		[[ -z "$EDITOR" ]] && { msg.err "Envvar EDITOR not set!"; exit 1; }
	fi
	export EDITOR
	
	tmpfile="/tmp/$PRG-$$-$RANDOM"

	CH9=$'\t'

	declare -i shellcheck=0 syntaxcheck=1 execute=0

main() {
	local File='' ftype='' ext sx
	local -i line=0 syntaxerr=0
	local -a cmd=()
	while (($#)); do
		case "$1" in
			-l|--line)				shift; line=$((${1:-1})) ;;
			+[[:digit:]*])		line=${1:1} ;;
			-n|--syntaxcheck)	syntaxcheck=1 ;;
			+n|-+syntaxcheck)	syntaxcheck=0 ;;
			-s|--shellcheck)	shellcheck=1 ;;
			+s|-+shellcheck)	shellcheck=0 ;;
			-x|--execute)			execute=1 ;;
			+x|-+execute)			execute=0 ;;
			-V|--version)			echo "$PRG ${_ent_VERSION}"; return 0;;
			-v|--verbose|+q)	msg.verbose.set on ;;
			-q|--quiet|+v)		msg.verbose.set off ;;
			-h|--help)				usage; return 0 ;;
			-*)								msg.err "Bad option [$1]"; return 22 ;;
			*)								cmd+=( "$1" ) ;;
		esac
		shift
	done
	(( ${#cmd[@]} == 1 )) || { usage; return 1; }
	
	File=$(readlink -f "${cmd[0]}") || File="${cmd[0]}"
	[[ $(basename "$File") == "$(basename "$0")" ]] && msg.die "Not a good idea."
	
	# File not exist!
	if [[ ! -f "$File" ]]; then
		# look for likely executable script
		sx=$(readlink -f "$(which "$(basename "$File")")")
		if [[ -z $sx ]]; then
			select sx in "Create New [$File]" "Locate [$(basename "$File")]" "Exit"; do
				[[ 'q0' == *"$REPLY"* ]] && return 1; [[ -z $sx ]] && continue; [[ $sx == 'Exit' ]] && msg.die 'Exit'
				File=$(str_str "$sx" '[' ']')
				break
			done
			if [[ "${sx:0:6}" == 'Create' ]]; then
				select ftype in bash php other Exit; do
					[[ 'q0' == *"$REPLY"* ]] && return 1; [[ -z $ftype ]] && continue; [[ $ftype == 'Exit' ]] && msg.die 'Exit'
					break
				done
				if [[ $ftype == 'bash' ]]; then
					local templ
					select templ in "$ENTITIES/docs/templates/"*.bash Exit; do
						[[ 'q0' == *"$REPLY"* ]] && return 1; [[ -z $templ ]] && continue; [[ $templ == 'Exit' ]] && msg.die 'Exit'
						break
					done
					[[ -f "$templ" ]] && { cp "$templ" "$File" && chmod 666 "$File" && chown "$USER" "$File"; }
				elif [[ $ftype == 'other' ]]; then
					ftype='text'
				fi
			else
				# locate or create
				sx=$(basename "$File")
				arr=( $(locate -b "\\$sx") )
				arr+=( "Create: ${File}"  )
			 	select File in "${arr[@]}"; do 
					[[ 'q0' == *"$REPLY"* ]] && return 1; [[ -z $File ]] && continue
					break
			 	done
			 	[[ ${File:0:8} == 'Create: ' ]] && File="${File:8}"
			fi
		else
			msg.warn -n "Edit executable [$sx]? (yN) "
			read -r -n 1 yn; echo
			[[ ${yn,} == 'y' ]] || exit 1
			File="$sx"
		fi
	fi

	if [[ -z $ftype ]]; then	
		ext="${File##*.}"
		if 		[[ $ext == 'php' ]];	then 
			ftype='php'
			shellcheck=0
		elif 	[[ $ext == 'sh'	|| $ext == 'bash' ]]; then 
			ftype='sh'
		else
			ftype=$(textfiletype -t "$File")
	#		[[ $ftype == 'text' || -z $ftype ]]  && ftype='sh'
			[[ $ext == 'sh'	|| $ext == 'bash' ]] && ftype='sh' 
		fi
	fi
		
	# Edit it.
	# shellcheck disable=2046
	$EDITOR $( ((line)) && echo "+${line}" ) "$File"

	[[ ! -f $File ]] && return 1
	# has File changed type?
	if [[ $ftype == 'text' || -z $ftype ]]; then
		if [[ -n $File ]]; then
			h=$(head -n 1 "$File")
			if [[ $h =~ ^\#\!.*/bash.* ]];  then  
				ftype='sh'
			elif [[ $h =~ ^\#\!.*/php.*  || ${h:0:2} == '<?' || ${h:0:5} == '<?php' ]]; then  
				ftype='php'
			fi
		fi
	fi

	# syntax check
	if ((syntaxcheck)); then
		syntaxerr=0	
		if [[ "${ftype}" == 'php' ]]; then
			msg.info  "$(php -l "${File}" 2>&1 | tee "$tmpfile")"
			hd="$(head -n1 "$tmpfile")"
			if [[ "${hd:0:9}" != 'No syntax' ]]; then
				syntaxerr=1
				l=$(trim "${hd##*on line }")
				if [[ -z "$l" ]]; then line=0
													else line=$(( l ))
				fi
			fi
		else
			if [[ $ftype == 'sh' || $ftype == 'bash' ]]; then
				msg.info "$(bash -n "${File}" 2>&1 | tee "$tmpfile")bash syntax OK"
				hd="$(head -n1 "$tmpfile")"
				if [[ -n $hd ]]; then
					syntaxerr=1
					l="${hd##*: line }"
					l=${l//${CH9}/ }
					l=$(trim "${l%%:*}")
					[[ -z "$l" ]] && line=0 || line=$l
				fi
			fi
		fi
		if ((syntaxerr)); then
			if msg.yn "Re-edit $File [$line]?"; then
				# shellcheck disable=SC2046
				exec "$PRGDIR/$PRG" "$File" --line "$line" $( ((execute)) && echo '-x' )
				exit
			fi
		fi
	fi
	
	## shellcheck
	if ((shellcheck)) && [[ $ftype == 'sh' || $ftype == 'bash'  ]] ; then
		if [[ -f "$File" ]]; then
			local -- scdisable
			# look for #! shellcheck flag for global disables
			scdisable="$( grep -m 1 '^#\![[:blank:]]*shellcheck[[:blank:]]*disable=' "$File" 2>/dev/null )"
			if [[ -n $scdisable ]]; then
				scdisable=${scdisable#*=}
				scdisable=${scdisable//,/ }
				scdisable="--exclude ${scdisable// /,}"
			fi
			# shellcheck disable=SC2086
			if ! $(command -v shellcheck) --shell=bash ${scdisable} -x "$File"; then
				if msg.yn "Re-edit [$File]?"; then
					# shellcheck disable=SC2046
					exec "$PRGDIR/$PRG" "$File" --line "${line:-1}" -s $( ((execute)) && echo '-x' )
					exit
				fi
			fi
			msg.info "shellcheck OK"
		fi
	fi

	if ((execute && !syntaxerr)); then
		if msg.yn "Execute $File?"; then
			if [[ $ftype == 'php' ]]; then
				$(which php) "$File"
			elif [[ $ftype == 'sh' ]]; then
				$(which bash) "$File"
			fi
		fi
	fi
}


cleanup() {
	local exitcode=$?
	[[ -n "$1" ]] && exitcode=$(($1))
	rm -f "$tmpfile"
	exit $exitcode
}

usage() {
	cat >&2 <<-etx
	Script  : $PRG
	Desc    : Edit/SyntaxCheck/ShellCheck/Execute for 
	        : bash and php scripts.
	        : Bash/php scripts without .sh/.bash/.php extensions 
	        : are autodetected from the header.
	        : Uses envvar EDITOR ([$EDITOR])
	Synopsis: $PRG filename [-l row] [-s] [-x]
	        :   -l row  position at row on entry to editor.
	        :   -s      execute shellcheck after editing.
	        :   +s      don't execute shellcheck after editing (default).
	        :   -x      execute script after editing (asks first).
	        :   +x      don't execute script after editing (default).
	Requires: shellcheck
	etx
	return 0
}

main "$@"
#fin
