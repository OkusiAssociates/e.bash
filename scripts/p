#!/bin/bash
	source entities || { echo >&2 "Could not open entities.bash!"; exit 1; }
#	source $OKROOT/entities/entities.bash new || { echo >&2 "Could not open entities.bash!"; exit 1; }
#	source entities.bash new || { echo >&2 "Could not open entities.bash!"; exit 1; }
	strict.set off
	verbose.set on
	trap.set on
	
	[[ -z "$EDITOR" ]] && export EDITOR="$(which joe) -tab 2 --wordwrap --autoindent"
	[[ -z "$EDITOR" ]] &&	export EDITOR="$(which nano)"
	[[ -z "$EDITOR" ]] &&	export EDITOR="$(which vi)"
	
	tmpfile="/tmp/p-$RANDOM"
	CH9=$'\t'

main() {
	local file='' ftype='' ext
	local -i line=0 syntaxerr=0 execute=0
	local -a cmd=()
	while (($#)); do
		case "$1" in
			-l|--line)				shift; line=$((${1:-1})) ;;
			+*)								line=${1:1} ;;
			-s|--shellcheck)	shellcheck=1 ;;
			-x|--execute)			execute=1 ;;
			-h|-?|--help)			usage exit ;;
			-v|--verbose)			verbose on ;;
			-q|--quiet)				verbose off ;;
			-*)								msg.die "Bad option [$1]" ;;
			*)								cmd+=( "$1" ) ;;
		esac
		shift
	done
	(( ${#cmd[@]} == 1 )) || usage exit;

	file="$(readlink -f "${cmd[0]}")"
	[[ -f $file ]] || file=$(readlink -f $(which ${cmd[0]}))
	
	if [[ ! -f "${file}" ]]; then
		if [[ -f "${file}.php" ]]; then
			ftype='php'
			file="${file}.${ftype}"
		elif [[ -f "${file}.sh" ]]; then
			ftype='sh'
			file="${file}.${ftype}"
		else
			msg.die "File '$file' not found!"
		fi
	else
		ext="${file##*.}"
		if 		[[ "$ext" == 'php' ]];	then 
			ftype='php'
		elif 	[[ "$ext" == 'sh'	|| "$ext" == 'bash' ]]; then 
			ftype='sh'
		else
			hd=$(head -n1 "$file")
			hd=${hd%% *}
			if [[ $hd == "#!$(which bash)" || $hd == "#!$(which sh)" || $hd == '#!/bin/bash' || $hd == '#!/bin/sh' ]]; then 
				ftype='sh' 
			elif [[ $hd == "#!$(which php)" || "${hd:0:2}" == '<?' ]]; then 
				ftype='php' 
			else 
				msg.die "$file is not a bash or php script!"
			fi
		fi
	fi

	$EDITOR $( ((line)) && echo "+${line}" ) "$file"

	if [[ "${ftype}" == 'php' ]]; then
		msg.info "$(php -l "${file}" 2>&1 | tee "$tmpfile")"
		hd="$(head -n1 "$tmpfile")"
		if [[ "${hd:0:9}" != 'No syntax' ]]; then
			syntaxerr=1
			l=$(trim "${hd##*on line }")
			if [[ -z "$l" ]]; then line=0
												else line=$(( l ))
			fi
		fi
	else
		msg.info "$(bash -n "${file}" 2>&1 | tee "$tmpfile")"
		hd="$(head -n1 "$tmpfile")"
		if [[ "${hd}" != '' ]]; then
			syntaxerr=1
			l="${hd##*: line }"
			l=${l//${CH9}/ }
			l=$(trim "${l%%:*}")
			[[ -z "$l" ]] && line=0 || line=$l
		fi
	fi

	if ((syntaxerr)); then
		if ask.yn "Re-edit $file [$line]?"; then
			$PRGDIR/$PRG "$file" --line $line $( ((execute)) && echo '-x' )
			exit
		fi
	fi

	if ((shellcheck)); then
		$(which shellcheck) "$file"
	fi

	if ((execute && !syntaxerr)); then
		if ask.yn "Execute $file?"; then
			if [[ $ftype == 'php' ]]; then
				$(which php) "$file"
			elif [[ $ftype == 'sh' ]]; then
				$(which bash) "$file"
			fi
		fi
	fi
}


cleanup() {
	local exitcode=$?
	[[ -n "$1" ]] && exitcode=$(($1))
	rm -f "$tmpfile"
	exit $exitcode
}

usage() {
	msg "Usage: $PRG filename[.php|.sh|.bash] [--line|-l rownum || +rownum] [-x]"
	tab.set ++
	msg.info "Edit and syntax check file."
	msg.info "Scripts without .sh or .bash extentions are autodetected from header (#!$(which bash))."
	tab.set ++
	msg.info "  -l n  position cursor at row n on entry to editor [$EDITOR]."
	msg.info "  +n    position cursor at row n on entry to editor [$EDITOR]."
	msg.info "  -s    execute shellcheck for bash scripts after editing."
	msg.info "-x      execute script after editting (asks first)."
	tab.set 0
	[[ "${1:-}" == 'exit' ]] && exit 1
}

main "$@"
#fin
