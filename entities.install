#!/bin/bash
#! shellcheck disable=SC1090,1091
	declare _u
	_u=$(< /etc/issue)
	[[ "${_u:0:12}" < 'Ubuntu 16.04' ]] \
			&& { echo  >&2 '[entities.bash] requires [Ubuntu 16.04] or higher.'; exit 1; }
	unset _u

usage() {
	local v PRG PRGDIR
	PRG=$(basename "$0")
	PRGDIR=$(dirname "$( readlink -fn -- "$0")")
	v="$(dirname "$(readlink "$0")")/e.d/entities.version.bash"
	# shellcheck disable=2015
	[[ -f "$v" ]] && source "$v" 2>/dev/null || true	# yes, this is deliberate
	cat <<-etx
	Script  : $PRG
	Version : entities ${_ent_VERSION:-Version Not Found}
	Desc    : entities.bash installation program.
	        : Requires root to install.
	        : Dependencies are defined in 
	        : [$PRGDIR/docs/entities.external.dependencies.list]
	        :
	Synopsis: $PRG [-y][-i] [-u][-c][-l] [-p] [-v][-q] [-V] [-h]
	        :   -y|--auto         Install without prompting.
	        :   -i|--install      Install with prompt.
	        :   -u|--apt-upgrade  Before external dependencies are installed
	        :                     perform apt upgrade.
	        :   -c|--apt-clean    After external dependencies are installed
	        :                     perform apt autoremove and apt clean.
	        :   -l|--mlocate      Update mlocate database. (This could take
	        :                     some time.)
	        :   -p|--prod         Make new build of help files and increment
	        :                     version build numbers (for developers).
	        :   --ucl             Do -u -c -l.
	        :   -v|--verbose      Turn message verbose on. Default on.
	        :   -q|--quiet        Turn message verbose off. Default off.
	        :   -V|--version      Print entities.bash version.
	        :   -h|--help         Print help message.
	        : 
	Examples: # 0. Don't ask. Just install it.
	        : $PRG -y
	        :
	        : # 1. Do everything.
	        : $PRG -y -u -c -l
	        :
	        : # 2. Do everything. Quietly. 
	        : #    (Useful for autoinstalling over networks)
	        : $PRG -y --clp -q
	etx
	((EUID)) && echo >&2 "        : Current user is [${EUID:-} ${USER:-}]"
	exit "${1:-0}"
}
	# cries for help.
	[[ "$*" == '' || "$*" == *"--help"* || "$*" == *"/?"* || "$*" == *-h* ]] && usage 0
	# not root say bye
	[[ "${USER:-}" == 'root' || $EUID == 0 ]] || usage 1

	declare -ix MajorVer=1 MinorVer=0

	declare -i Production=0
	declare -i autoInstall=0
	declare -i Install=0
	declare -i AptUpgrade=0 AptClean=0 MLocate=0
	declare canonical

	declare etc_profile_d='/etc/profile.d/entities.env.sh'

	# make absolutely certain we have identified the canonical entities.bash script
	PRG=$(basename "$(/bin/readlink -fn -- "${0:-}")")
	PRGDIR=$(/usr/bin/dirname "$(/bin/readlink -fn -- "${0:-}")")
	canonical="$PRGDIR/entities.bash"
	if [[ ! -f "$PRGDIR/entities.bash" ]]; then	# located in the same directory as this script.
		echo >&2 "$PRG: Could not find entities.bash in the [$PRGDIR] directory."
		echo >&2 "$PRG: Check that it has been installed properly."
		exit 2
	fi
	OPRG=$PRG; OPRGDIR=$PRGDIR

	OENTITIES=${ENTITIES:-}; ENTITIES=$PRGDIR
	source "$canonical" new || { echo >&2 "$PRG: Could not open [$canonical]!"; exit 2; }
	ENTITIES=$OENTITIES;
	PRG=$OPRG; PRGDIR=$OPRGDIR

	# ==========================================================================
	# let's start
	strict.set off
	msg.verbose.set on
	debug.set off
	trap.set on
	msg.prefix.set 'entities.bash'
	msg.usetag.set off
	
	cd "$PRGDIR" || msg.die "Could not change into directory [$PRGDIR]"

	# set ENTITIES as the destination (production) directory
	# 	ENTITIES in this case is the destination directory for the install
	ENTITIES='/lib/include/entities'
	mkdir -p "$ENTITIES" || exit 2

	# are we trying to install into the install directory?
	[[ $ENTITIES == "$PRGDIR" ]] &&	msg.die 'Cannot install over installation directory!'

	declare env_entities
	# shellcheck disable=SC2154
	env_entities="$(cat <<-eot

			#X entities.bash.begin
			#X entities ${_ent_VERSION}
			#X   * export ENTITIES='${ENTITIES}'
			#X Installed from $(readlink -f "$0")
			#X   on $(date +'%F %T').420 
			#X   by ${USER:-}@${HOSTNAME}
			#X https://github.com/OkusiAssociates/entities.bash
			ENTITIES="${ENTITIES}"
			export ENTITIES
			#X entities.bash.end

		eot
		)"

	# Exclusions for rsync
	declare -a exclude=( 't' 'tt' 't1' 't2' '*~' '*.bak' '*.old' 'gudang/' '.gudang/' '*.zip' 'dev/' 'test/' 'tmp/' 'temp/' )
	declare SyncExclude="/tmp/$PRG-exclusions-$RANDOM"
	echo -n >"$SyncExclude"
	declare _l; for _l in "${exclude[@]}"; do	echo "${_l}"; done >>"$SyncExclude"; unset _l
		
main() {
	declare _verfile="$PRGDIR/e.d/entities.version.bash"
	source "$_verfile" || msg.die "Could not source [$_verfile]"
	while (( $# )); do
		case "$1" in
			-p|--prod*)				Production=1;;
			-y|--auto)				autoInstall=1; Install=1;;
			-i|--install)			Install=1;;
			-u|--apt-upgrade)	AptUpgrade=1;;
			-c|--apt-clean)		AptClean=1;;
			-l|--mlocate)			MLocate=1;;
			--ucl)						AptUpgrade=1; AptClean=1; MLocate=1;;
			-v|--verbose|+q)	msg.verbose.set on;;
			-q|--quiet|+v)		msg.verbose.set off;;
			-V|--version)			echo "$PRG ${_ent_VERSION}"; return 0;;
			-h|--help)				usage 0;;
			*)								msg.die "Bad command argument [$1]";;
		esac
		shift
	done
	(( ! Install )) && usage 1

	msg.info "Installation directory is [$canonical]"
	msg.info "entities.bash shall be installed to [$ENTITIES]."
	if [[ -f "$ENTITIES/entities.bash" ]]; then
		msg.warn "entities.bash is already installed at [$ENTITIES]."
		msg.warn "Backup will be at [$ENTITIES/entities.bash.old]."
	fi

	if (( ! autoInstall)); then
		infotext
		msg.yn 'Install with these settings?' \
				|| { echo; return 0; }
	fi

	msg 'Installing entities.bash'

	if ((Production)); then
		msg.info 'Creating Help Files'
		"$PRGDIR/entities.help.make" --auto	|| msg.die "[$PRGDIR/entities.help.make] failed!"

		msg.info 'Create new entities.bash version/build file'
		[[ -z ${_ent_VERSION:-} ]] && msg.die "Version has not been set. See [$_verfile]"
		declare -ia _arr
		# shellcheck disable=SC2206
		_arr=( ${_ent_VERSION//./ } )
		declare -i _dayssince
		_dayssince=$(( ($(date +%s) - $(date +%s -d '2019-06-21')) / (60*60*24) ))
		_arr[2]=420
		(( _arr[3] == _dayssince )) || { _arr[3]=${_dayssince}; _arr[4]=0; }
		_arr[4]+=1
		_p=${_arr[*]}
		cat >"$_verfile" <<-etx
			#!$(command -v bash)
			#X GlobalX: _ent_VERSION
			#X Version: ${_p// /.}
			#X Desc   : Return version/build of this entities.bash.
			#X        : Returns string in the form:
			#X        :   majorver.minorver.420.day0.build
			#X        : Where:
			#X        :   majorver  $MajorVer
			#X        :   minorver  $MinorVer
			#X        :   420       Constant
			#X        :   day0      Days since 2019-06-21 ($_dayssince)
			#X        :   build     This is build #${_arr[4]} on day $_dayssince
			declare -xg _ent_VERSION
			_ent_VERSION='${_p// /.}'
			#fin
		etx
		source "$_verfile" || exit 2
		unset _verfile _arr _dayssince
	fi

	"$PRGDIR/entities.make.minimal" --no-prompt \
			|| msg.die "[$PRGDIR/entities.make.minimal] failed!"

	make_profile_d

	mod_environment

	install_files

	declare output
	msg.verbose && output='/dev/stdout' || output='/dev/null'
	install_externals >$output 2>_errlog_ || true
	cat _errlog_
	rm -f _errlog_
	unset output
	
	testit

	msg.line '-'
	msg "entities.bash [${_ent_VERSION}] has been installed." \
			'To activate entities.bash environment enter:' \
			'    source entities new' \
			'For help:' \
			'    entities help ' \
			'Repository:' \
			'    https://github.com/OkusiAssociates/entities.bash' \
			'Issue Reports:' \
			'    sysadmin@okusi.id' \

	rm -f "$SyncExclude"
}

make_profile_d() {
	msg.info "Creating [${etc_profile_d}]"
	mkdir -p "$(dirname "$etc_profile_d")" || msg.die "Could not create [$(dirname "$etc_profile_d")]"
	echo -e "${env_entities}"	> "$etc_profile_d"		
	chmod 644 "$etc_profile_d" 				|| msg.die "Could not chmod 644 [$etc_profile_d]"
	chown root:root "$etc_profile_d"	|| msg.die "Could not chown [$etc_profile_d]"
}

# Dep: /etc/environment cat
mod_environment() {
	envfile=/etc/environment
	msg.info "Modifying [$envfile]"
	tmpfile="$(mktemp --tmpdir 'ent-XXXX')"
	grep -v '^[[:blank:]]*ENTITIES=' "$envfile" >"$tmpfile" || true
	echo "ENTITIES=\"$ENTITIES\"" >>"$tmpfile"
	cp -p "$envfile" "${envfile}~"	|| msg.die "Could not backup [$envfile] to [${envfile}~]"
	chown root:root "$tmpfile"			|| msg.die "[$tmpfile] chown error!"
	chmod 644 "$tmpfile" 						|| msg.die "[$tmpfile] chmod error!"
	mv "$tmpfile" "$envfile"
}


infotext() {
	msg.tab.set ++
	msg "entities.bash installation shall:"
	((Production)) && \
	msg "  * Create Help Files" \
			"  * Create new entities.bash version/build"
	msg	"  * Create [$etc_profile_d]" \
			"  * Add envvar ENTITIES [$ENTITIES] to [/etc/environment]" \
			"  * Copy all script files to directory [$ENTITIES]" \
			"  * Install external dependencies"
	((AptUpgrade)) && \
	msg "  * Run apt-get update/upgrade"
	((AptClean)) && \
	msg "  * Run apt-get autoremove/clean"
	((MLocate)) && \
	msg "  * Run updatedb"

#	msg	"ENTITIES=[$ENTITIES]" \
#			"PRG=[$PRG]" 					\
#			"PRGDIR=[$PRGDIR]"
	msg.tab.set --
}

# Dep: mkdir cd rsync find ln touch cp
install_files() {
	msg.info "Installing Entities to [${ENTITIES}]"

	cd "$PRGDIR" || exit 2

	# do backup of existing $ENTITIES directory
	msg.info "Backing up [$ENTITIES]"
	if [[ -d "${ENTITIES}.old" ]]; then
		if [[ -d "${ENTITIES}" ]]; then
			msg.info "* Deleting [$ENTITIES.old]"
			rm -rf "${ENTITIES}.old"
		fi
	fi
	if [[ -d "${ENTITIES}" ]]; then
		msg.info "* Renaming [$ENTITIES] to [$ENTITIES.old]"
		mv "${ENTITIES}" "${ENTITIES}.old" || { msg.err "$(errno $?)" "Could not move [${ENTITIES}] to [${ENTITIES}.old]"; return 1; }
	fi

	# start creating $ENTITIES
	msg.info "Copying entities.bash files to [$ENTITIES]"
	mkdir -p "$ENTITIES" || exit $?
	[[ -d "$ENTITIES" ]] || exit $?

	/usr/bin/rsync -a entities.bash					"$ENTITIES/" >/dev/null || exit $?
	/usr/bin/rsync -a entities.bash.min			"$ENTITIES/" >/dev/null || exit $?
	/usr/bin/rsync -a entities.make.minimal	"$ENTITIES/" >/dev/null || exit $?
	/usr/bin/rsync -a entities.help					"$ENTITIES/" >/dev/null || exit $?
	/usr/bin/rsync -a entities.help.make		"$ENTITIES/" >/dev/null || exit $?

	cp -p LICENSE "$ENTITIES/" || exit $?
	( echo "##### Version [$_ent_VERSION]"
		grep -iv '^#####[[:blank:]]version[[:blank:]]\[' README.md
	) > "$ENTITIES/README.md"
	cp -p "$ENTITIES/README.md" README.md || exit $?	# yes, other way around; saves using a temp file

	mkdir -p "$ENTITIES/e.d"
	/usr/bin/rsync -al --exclude-from "$SyncExclude" entities.d/*				"$ENTITIES/entities.d/" || exit $?

	mkdir -p "$ENTITIES/scripts"
	/usr/bin/rsync -al --exclude-from "$SyncExclude" scripts/*					"$ENTITIES/scripts/" || exit $?

	mkdir -p "$ENTITIES/docs/help"
	/usr/bin/rsync -al --exclude-from "$SyncExclude" docs/*							"$ENTITIES/docs/" || exit $?

	# make symlinks in $ENTITIES directory
	msg.info "Creating symlinks in [$ENTITIES] directory"
	cd "$ENTITIES" 																|| exit 2
	# execute permissions on entities
	chmod 775 entities.bash entities.bash.min			|| exit $?
	# in production, entities points to the min version
	ln -fs entities.bash.min entities							|| exit $?
	ln -fs entities.bash.min entities.min					|| exit $?
	ln -fs e.d entities.d													|| exit $?
	
	# MAIN EXECUTABLE in /usr/local/bin
	ln -fs "$ENTITIES/entities.bash" '/usr/local/bin/entities' || exit $?
	# this INSTALL EXECUTABLE points to entities.bash *installation* directory
	ln -fs "$PRGDIR/entities.install" '/usr/local/bin/entities.install' || exit $?

	# symlink to bundled utility scripts
	declare -a arr
	declare -- s sb
	mapfile -t arr < <(find scripts/ -executable -type f | grep -v ".gudang\|/dev/\|create-help")
#	arr=( $(find scripts/ -executable -type f | grep -v ".gudang\|/dev/\|create-help") )
	for s in "${arr[@]}"; do
		sb=$(basename "$s")
		if [[ $HOSTNAME == 'okusi0' ]]; then
			msg.info "Linking $PRGDIR/$s to /usr/local/bin/$sb"
			ln -fs "$PRGDIR/$s" "/usr/local/bin/$sb"
		else
			msg.info "Linking $ENTITIES/$s to /usr/local/bin/$sb"
			ln -fs "$ENTITIES/$s" "/usr/local/bin/$sb"
		fi
	done

	# touch420 all files in $ENTITIES directory
	msg.info "Change permissions in [$ENTITIES] directory"
	cd "$ENTITIES" || exit 2
	chown root:root ${ENTITIES}/* -R || exit $?
	local IFS=$'\n' f fd
	local -a arr
	mapfile -t arr < <(/usr/bin/find "$ENTITIES" -not -type l | grep -v '.g\|~')
  for f in "${arr[@]}"; do
		if [[ -d "$f" ]]; then chmod 775 "$f"
		else chmod u+rw,g+rw,o+rw "$f"	### should this be 555 perhaps?? ###
		fi
		fd=$(stat "$f" -c '%y');
		fd=${fd%% *}
		/usr/bin/touch -h -d "$(date +'%F 04:20:00' -d "$fd")" "$f"
	done
		
	# back to base
	cd "$PRGDIR" || exit 2
}

# test installation
testit() {
	cd "$ENTITIES" || { echo >&2 "wtf? Could not change to [$ENTITIES]"; return 1; }
	strict.set off
	trap.set off
	source ./entities.bash new || { echo >&2 "wtf?? Could not source [$PWD/entities.bash]"; return 1; }
	trap.set on
	return 0
}

make.syncexclude() {
	cat >"$SyncExclude" <<-EOT
		~*
		.~*
		*~
		*.bak
		*.c
		dead.letter
		DEADJOE
		.*/DEADJOE
		dev/
		.git
		.git/
		.gitignore
		.gudang/*
		*/gudang/
		gudang/
		*.lock
		*.log
		old/
		syncexclude
		t
		*/t/*
		t1
		t2
		temp/*
		*/tmp/*
		tmp/*
		tt
		entities.d/
	EOT
}

install_externals() {
	declare -a _ent_ESSENTIAL_PACKAGES=()
	declare -a _ent_RECOMMENDED_PACKAGES=()
	declare -a _ent_PHP_MYSQL_CLIENT_PACKAGES=()
	source "$PRGDIR/docs/entities.external-dependencies.list" \
			|| { msg.err 'Dependencies file not found.'; return 2; }

	# update/upgrade
	if ((AptUpgrade)); then
		msg.info 'Updating Installed Packages'
		apt-get -qq --yes update 	|| msg.die 'Error updating packages.'
		apt-get -qq --yes upgrade	|| msg.die 'Error upgrading packages.'
	fi

	msg.info 'Installing External Packages'
	# shellcheck disable=2068
	apt-get -qq install --yes ${_ent_ESSENTIAL_PACKAGES[@]} ${_ent_RECOMMENDED_PACKAGES[@]} ${_ent_PHP_MYSQL_CLIENT_PACKAGES[@]} \
			||	msg.err 'Error/s installing External Packages.'

	if ((AptClean)); then
		msg.info 'Performing apt Cleanup'
		apt-get -qq --yes autoremove	|| true
		apt-get -qq --yes clean				|| true
	fi
	if ((MLocate)); then
		msg.info 'Updating mlocate Database'
		updatedb || true
	fi
	
	msg.info 'All External Packages have been installed.'
	return 0
}

main "$@"
#fin
